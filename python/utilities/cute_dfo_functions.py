import numpy as np;

c13 = 1.3e1
c14 = 1.4e1
c29 = 2.9e1
c45 = 4.5e1
v  = [4.0e0,2.0e0,1.0e0,5.0e-1,2.5e-1,1.67e-1,1.25e-1,1.0e-1,8.33e-2,
    7.14e-2,6.25e-2]
y1 = [1.4e-1,1.8e-1,2.2e-1,2.5e-1,2.9e-1,3.2e-1,3.5e-1,3.9e-1,3.7e-1,
    5.8e-1,7.3e-1,9.6e-1,1.34e0,2.1e0,4.39e0]
y2 = [1.957e-1,1.947e-1,1.735e-1,1.6e-1,8.44e-2,6.27e-2,4.56e-2,3.42e-2,
    3.23e-2,2.35e-2,2.46e-2]
y3 = [3.478e4,2.861e4,2.365e4,1.963e4,1.637e4,1.372e4,1.154e4,9.744e3,
    8.261e3,7.03e3,6.005e3,5.147e3,4.427e3,3.82e3,3.307e3,2.872e3]
y4 = [8.44e-1,9.08e-1,9.32e-1,9.36e-1,9.25e-1,9.08e-1,8.81e-1,8.5e-1,
    8.18e-1,7.84e-1,7.51e-1,7.18e-1,6.85e-1,6.58e-1,6.28e-1,6.03e-1,
    5.8e-1,5.58e-1,5.38e-1,5.22e-1,5.06e-1,4.9e-1,4.78e-1,4.67e-1,
    4.57e-1,4.48e-1,4.38e-1,4.31e-1,4.24e-1,4.2e-1,4.14e-1,4.11e-1,
    4.06e-1]
y5 = [1.366e0,1.191e0,1.112e0,1.013e0,9.91e-1,8.85e-1,8.31e-1,8.47e-1,
    7.86e-1,7.25e-1,7.46e-1,6.79e-1,6.08e-1,6.55e-1,6.16e-1,6.06e-1,
    6.02e-1,6.26e-1,6.51e-1,7.24e-1,6.49e-1,6.49e-1,6.94e-1,6.44e-1,
    6.24e-1,6.61e-1,6.12e-1,5.58e-1,5.33e-1,4.95e-1,5.0e-1,4.23e-1,
    3.95e-1,3.75e-1,3.72e-1,3.91e-1,3.96e-1,4.05e-1,4.28e-1,4.29e-1,
    5.23e-1,5.62e-1,6.07e-1,6.53e-1,6.72e-1,7.08e-1,6.33e-1,6.68e-1,
    6.45e-1,6.32e-1,5.91e-1,5.59e-1,5.97e-1,6.25e-1,7.39e-1,7.1e-1,
    7.29e-1,7.2e-1,6.36e-1,5.81e-1,4.28e-1,2.92e-1,1.62e-1,9.8e-2,5.4e-2]



def _func1(m, x):
    s = np.sum(x)
    if len(x) < m:
        ret = 2 * np.ones(m) / s + 1
        ret[:len(x)] += x
    else:
        ret = x.copy()
        ret[:m] += 2 * np.ones(m) / s + 1
    return ret

def func1(m):
    return lambda x: _func1(m, x)





def _func2(m, x):
    s = np.dot(x, np.arange(1,len(x)+1))
    return np.arange(1, m+1)*s - 1

def func2(m):
    return lambda x: _func2(m, x)




def _func3(m, x):
    s = np.dot(x[1:len(x)-1], np.arange(1, len(x)-1))
    ret = np.arange(1, m) * s - 1
    return np.append(ret, [-1])


def dfovec(m, n, x, prob):
    if prob == 1:
        return _func1(m, x)
    elif prob == 2:
        return _func2(m, x)
    elif prob == 3:
        return _func3(m, x)
    else:
        raise Exception("Not implement")



